// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zss_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZSS {
namespace Protocol {
class Robots_StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Robots_Status> {
} _Robots_Status_default_instance_;
class Robot_StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Robot_Status> {
} _Robot_Status_default_instance_;
class Robots_CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Robots_Command> {
} _Robots_Command_default_instance_;
class Robot_CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Robot_Command> {
} _Robot_Command_default_instance_;

namespace protobuf_zss_5fcmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, robots_status_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, infrared_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, flat_kick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, chip_kick_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, delay_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, kick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, dribbler_spin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, current_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, target_angle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Robots_Status)},
  { 7, 16, sizeof(Robot_Status)},
  { 20, 27, sizeof(Robots_Command)},
  { 29, 43, sizeof(Robot_Command)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robots_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robot_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robots_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robot_Command_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zss_cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Robots_Status_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Robot_Status_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Robots_Command_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Robot_Command_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Robots_Status_default_instance_.DefaultConstruct();
  _Robot_Status_default_instance_.DefaultConstruct();
  _Robots_Command_default_instance_.DefaultConstruct();
  _Robot_Command_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rzss_cmd.proto\022\014ZSS.Protocol\"B\n\rRobots_"
      "Status\0221\n\rrobots_status\030\001 \003(\0132\032.ZSS.Prot"
      "ocol.Robot_Status\"X\n\014Robot_Status\022\020\n\010rob"
      "ot_id\030\001 \002(\005\022\020\n\010infrared\030\002 \002(\010\022\021\n\tflat_ki"
      "ck\030\003 \002(\010\022\021\n\tchip_kick\030\004 \002(\010\"M\n\016Robots_Co"
      "mmand\022,\n\007command\030\001 \003(\0132\033.ZSS.Protocol.Ro"
      "bot_Command\022\r\n\005delay\030\002 \001(\005\"\276\001\n\rRobot_Com"
      "mand\022\020\n\010robot_id\030\001 \002(\005\022\022\n\nvelocity_x\030\002 \002"
      "(\002\022\022\n\nvelocity_y\030\003 \002(\002\022\022\n\nvelocity_r\030\004 \002"
      "(\002\022\014\n\004kick\030\005 \002(\010\022\r\n\005power\030\006 \002(\002\022\025\n\rdribb"
      "ler_spin\030\007 \002(\002\022\025\n\rcurrent_angle\030\010 \001(\002\022\024\n"
      "\014target_angle\030\t \001(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zss_cmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zss_5fcmd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robots_Status::kRobotsStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robots_Status::Robots_Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robots_Status)
}
Robots_Status::Robots_Status(const Robots_Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      robots_status_(from.robots_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Status)
}

void Robots_Status::SharedCtor() {
  _cached_size_ = 0;
}

Robots_Status::~Robots_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Status)
  SharedDtor();
}

void Robots_Status::SharedDtor() {
}

void Robots_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robots_Status::descriptor() {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robots_Status& Robots_Status::default_instance() {
  protobuf_zss_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robots_Status* Robots_Status::New(::google::protobuf::Arena* arena) const {
  Robots_Status* n = new Robots_Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robots_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robots_Status)
  robots_status_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robots_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robots_Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robots_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robots_Status)
  return false;
#undef DO_
}

void Robots_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robots_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  for (unsigned int i = 0, n = this->robots_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots_status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robots_Status)
}

::google::protobuf::uint8* Robots_Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  for (unsigned int i = 0, n = this->robots_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->robots_status(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Status)
  return target;
}

size_t Robots_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robots_Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  {
    unsigned int count = this->robots_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robots_status(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robots_Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robots_Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robots_Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robots_Status)
    MergeFrom(*source);
  }
}

void Robots_Status::MergeFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_status_.MergeFrom(from.robots_status_);
}

void Robots_Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Status::CopyFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Status::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_status())) return false;
  return true;
}

void Robots_Status::Swap(Robots_Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robots_Status::InternalSwap(Robots_Status* other) {
  robots_status_.InternalSwap(&other->robots_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robots_Status::GetMetadata() const {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robots_Status

// repeated .ZSS.Protocol.Robot_Status robots_status = 1;
int Robots_Status::robots_status_size() const {
  return robots_status_.size();
}
void Robots_Status::clear_robots_status() {
  robots_status_.Clear();
}
const ::ZSS::Protocol::Robot_Status& Robots_Status::robots_status(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Get(index);
}
::ZSS::Protocol::Robot_Status* Robots_Status::mutable_robots_status(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Mutable(index);
}
::ZSS::Protocol::Robot_Status* Robots_Status::add_robots_status() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >*
Robots_Status::mutable_robots_status() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Robots_Status.robots_status)
  return &robots_status_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Status >&
Robots_Status::robots_status() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Robots_Status.robots_status)
  return robots_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot_Status::kRobotIdFieldNumber;
const int Robot_Status::kInfraredFieldNumber;
const int Robot_Status::kFlatKickFieldNumber;
const int Robot_Status::kChipKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot_Status::Robot_Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot_Status)
}
Robot_Status::Robot_Status(const Robot_Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&robot_id_, &from.robot_id_,
    reinterpret_cast<char*>(&chip_kick_) -
    reinterpret_cast<char*>(&robot_id_) + sizeof(chip_kick_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Status)
}

void Robot_Status::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&robot_id_, 0, reinterpret_cast<char*>(&chip_kick_) -
    reinterpret_cast<char*>(&robot_id_) + sizeof(chip_kick_));
}

Robot_Status::~Robot_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Status)
  SharedDtor();
}

void Robot_Status::SharedDtor() {
}

void Robot_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_Status::descriptor() {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot_Status& Robot_Status::default_instance() {
  protobuf_zss_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robot_Status* Robot_Status::New(::google::protobuf::Arena* arena) const {
  Robot_Status* n = new Robot_Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot_Status)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&robot_id_, 0, reinterpret_cast<char*>(&chip_kick_) -
      reinterpret_cast<char*>(&robot_id_) + sizeof(chip_kick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robot_Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_robot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool infrared = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_infrared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infrared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool flat_kick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flat_kick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flat_kick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool chip_kick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_chip_kick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chip_kick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robot_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robot_Status)
  return false;
#undef DO_
}

void Robot_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robot_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_id(), output);
  }

  // required bool infrared = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->infrared(), output);
  }

  // required bool flat_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flat_kick(), output);
  }

  // required bool chip_kick = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->chip_kick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robot_Status)
}

::google::protobuf::uint8* Robot_Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_id(), target);
  }

  // required bool infrared = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->infrared(), target);
  }

  // required bool flat_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flat_kick(), target);
  }

  // required bool chip_kick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->chip_kick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Status)
  return target;
}

size_t Robot_Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot_Status)
  size_t total_size = 0;

  if (has_robot_id()) {
    // required int32 robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->robot_id());
  }

  if (has_infrared()) {
    // required bool infrared = 2;
    total_size += 1 + 1;
  }

  if (has_flat_kick()) {
    // required bool flat_kick = 3;
    total_size += 1 + 1;
  }

  if (has_chip_kick()) {
    // required bool chip_kick = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Robot_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot_Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->robot_id());

    // required bool infrared = 2;
    total_size += 1 + 1;

    // required bool flat_kick = 3;
    total_size += 1 + 1;

    // required bool chip_kick = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot_Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot_Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot_Status)
    MergeFrom(*source);
  }
}

void Robot_Status::MergeFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      infrared_ = from.infrared_;
    }
    if (cached_has_bits & 0x00000004u) {
      flat_kick_ = from.flat_kick_;
    }
    if (cached_has_bits & 0x00000008u) {
      chip_kick_ = from.chip_kick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot_Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Status::CopyFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Robot_Status::Swap(Robot_Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot_Status::InternalSwap(Robot_Status* other) {
  std::swap(robot_id_, other->robot_id_);
  std::swap(infrared_, other->infrared_);
  std::swap(flat_kick_, other->flat_kick_);
  std::swap(chip_kick_, other->chip_kick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot_Status::GetMetadata() const {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot_Status

// required int32 robot_id = 1;
bool Robot_Status::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot_Status::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot_Status::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot_Status::clear_robot_id() {
  robot_id_ = 0;
  clear_has_robot_id();
}
::google::protobuf::int32 Robot_Status::robot_id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.robot_id)
  return robot_id_;
}
void Robot_Status::set_robot_id(::google::protobuf::int32 value) {
  set_has_robot_id();
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.robot_id)
}

// required bool infrared = 2;
bool Robot_Status::has_infrared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot_Status::set_has_infrared() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot_Status::clear_has_infrared() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot_Status::clear_infrared() {
  infrared_ = false;
  clear_has_infrared();
}
bool Robot_Status::infrared() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.infrared)
  return infrared_;
}
void Robot_Status::set_infrared(bool value) {
  set_has_infrared();
  infrared_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.infrared)
}

// required bool flat_kick = 3;
bool Robot_Status::has_flat_kick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot_Status::set_has_flat_kick() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot_Status::clear_has_flat_kick() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot_Status::clear_flat_kick() {
  flat_kick_ = false;
  clear_has_flat_kick();
}
bool Robot_Status::flat_kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.flat_kick)
  return flat_kick_;
}
void Robot_Status::set_flat_kick(bool value) {
  set_has_flat_kick();
  flat_kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.flat_kick)
}

// required bool chip_kick = 4;
bool Robot_Status::has_chip_kick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robot_Status::set_has_chip_kick() {
  _has_bits_[0] |= 0x00000008u;
}
void Robot_Status::clear_has_chip_kick() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robot_Status::clear_chip_kick() {
  chip_kick_ = false;
  clear_has_chip_kick();
}
bool Robot_Status::chip_kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Status.chip_kick)
  return chip_kick_;
}
void Robot_Status::set_chip_kick(bool value) {
  set_has_chip_kick();
  chip_kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Status.chip_kick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robots_Command::kCommandFieldNumber;
const int Robots_Command::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robots_Command::Robots_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robots_Command)
}
Robots_Command::Robots_Command(const Robots_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      command_(from.command_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Command)
}

void Robots_Command::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
}

Robots_Command::~Robots_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Command)
  SharedDtor();
}

void Robots_Command::SharedDtor() {
}

void Robots_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robots_Command::descriptor() {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robots_Command& Robots_Command::default_instance() {
  protobuf_zss_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robots_Command* Robots_Command::New(::google::protobuf::Arena* arena) const {
  Robots_Command* n = new Robots_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robots_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robots_Command)
  command_.Clear();
  delay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robots_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robots_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Robot_Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robots_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robots_Command)
  return false;
#undef DO_
}

void Robots_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robots_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Command command = 1;
  for (unsigned int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robots_Command)
}

::google::protobuf::uint8* Robots_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Command command = 1;
  for (unsigned int i = 0, n = this->command_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->command(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Command)
  return target;
}

size_t Robots_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robots_Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ZSS.Protocol.Robot_Command command = 1;
  {
    unsigned int count = this->command_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command(i));
    }
  }

  // optional int32 delay = 2;
  if (has_delay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robots_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robots_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robots_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robots_Command)
    MergeFrom(*source);
  }
}

void Robots_Command::MergeFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  if (from.has_delay()) {
    set_delay(from.delay());
  }
}

void Robots_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Command::CopyFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Command::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->command())) return false;
  return true;
}

void Robots_Command::Swap(Robots_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robots_Command::InternalSwap(Robots_Command* other) {
  command_.InternalSwap(&other->command_);
  std::swap(delay_, other->delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robots_Command::GetMetadata() const {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robots_Command

// repeated .ZSS.Protocol.Robot_Command command = 1;
int Robots_Command::command_size() const {
  return command_.size();
}
void Robots_Command::clear_command() {
  command_.Clear();
}
const ::ZSS::Protocol::Robot_Command& Robots_Command::command(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Command.command)
  return command_.Get(index);
}
::ZSS::Protocol::Robot_Command* Robots_Command::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robots_Command.command)
  return command_.Mutable(index);
}
::ZSS::Protocol::Robot_Command* Robots_Command::add_command() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Robots_Command.command)
  return command_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >*
Robots_Command::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Robots_Command.command)
  return &command_;
}
const ::google::protobuf::RepeatedPtrField< ::ZSS::Protocol::Robot_Command >&
Robots_Command::command() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Robots_Command.command)
  return command_;
}

// optional int32 delay = 2;
bool Robots_Command::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robots_Command::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
void Robots_Command::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robots_Command::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
::google::protobuf::int32 Robots_Command::delay() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robots_Command.delay)
  return delay_;
}
void Robots_Command::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robots_Command.delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot_Command::kRobotIdFieldNumber;
const int Robot_Command::kVelocityXFieldNumber;
const int Robot_Command::kVelocityYFieldNumber;
const int Robot_Command::kVelocityRFieldNumber;
const int Robot_Command::kKickFieldNumber;
const int Robot_Command::kPowerFieldNumber;
const int Robot_Command::kDribblerSpinFieldNumber;
const int Robot_Command::kCurrentAngleFieldNumber;
const int Robot_Command::kTargetAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot_Command::Robot_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zss_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot_Command)
}
Robot_Command::Robot_Command(const Robot_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&robot_id_, &from.robot_id_,
    reinterpret_cast<char*>(&target_angle_) -
    reinterpret_cast<char*>(&robot_id_) + sizeof(target_angle_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Command)
}

void Robot_Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&robot_id_, 0, reinterpret_cast<char*>(&target_angle_) -
    reinterpret_cast<char*>(&robot_id_) + sizeof(target_angle_));
}

Robot_Command::~Robot_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Command)
  SharedDtor();
}

void Robot_Command::SharedDtor() {
}

void Robot_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_Command::descriptor() {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot_Command& Robot_Command::default_instance() {
  protobuf_zss_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robot_Command* Robot_Command::New(::google::protobuf::Arena* arena) const {
  Robot_Command* n = new Robot_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot_Command)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&robot_id_, 0, reinterpret_cast<char*>(&current_angle_) -
      reinterpret_cast<char*>(&robot_id_) + sizeof(current_angle_));
  }
  target_angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robot_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_robot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float velocity_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_velocity_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float velocity_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_velocity_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float velocity_r = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_velocity_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool kick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_kick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float power = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dribbler_spin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_dribbler_spin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dribbler_spin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float current_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_current_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float target_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_target_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robot_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robot_Command)
  return false;
#undef DO_
}

void Robot_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robot_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_id(), output);
  }

  // required float velocity_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity_x(), output);
  }

  // required float velocity_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity_y(), output);
  }

  // required float velocity_r = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_r(), output);
  }

  // required bool kick = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->kick(), output);
  }

  // required float power = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->power(), output);
  }

  // required float dribbler_spin = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dribbler_spin(), output);
  }

  // optional float current_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->current_angle(), output);
  }

  // optional float target_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->target_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robot_Command)
}

::google::protobuf::uint8* Robot_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_id(), target);
  }

  // required float velocity_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity_x(), target);
  }

  // required float velocity_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity_y(), target);
  }

  // required float velocity_r = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_r(), target);
  }

  // required bool kick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->kick(), target);
  }

  // required float power = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->power(), target);
  }

  // required float dribbler_spin = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dribbler_spin(), target);
  }

  // optional float current_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->current_angle(), target);
  }

  // optional float target_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->target_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Command)
  return target;
}

size_t Robot_Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot_Command)
  size_t total_size = 0;

  if (has_robot_id()) {
    // required int32 robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->robot_id());
  }

  if (has_velocity_x()) {
    // required float velocity_x = 2;
    total_size += 1 + 4;
  }

  if (has_velocity_y()) {
    // required float velocity_y = 3;
    total_size += 1 + 4;
  }

  if (has_velocity_r()) {
    // required float velocity_r = 4;
    total_size += 1 + 4;
  }

  if (has_kick()) {
    // required bool kick = 5;
    total_size += 1 + 1;
  }

  if (has_power()) {
    // required float power = 6;
    total_size += 1 + 4;
  }

  if (has_dribbler_spin()) {
    // required float dribbler_spin = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Robot_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot_Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->robot_id());

    // required float velocity_x = 2;
    total_size += 1 + 4;

    // required float velocity_y = 3;
    total_size += 1 + 4;

    // required float velocity_r = 4;
    total_size += 1 + 4;

    // required bool kick = 5;
    total_size += 1 + 1;

    // required float power = 6;
    total_size += 1 + 4;

    // required float dribbler_spin = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float current_angle = 8;
  if (has_current_angle()) {
    total_size += 1 + 4;
  }

  // optional float target_angle = 9;
  if (has_target_angle()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot_Command)
    MergeFrom(*source);
  }
}

void Robot_Command::MergeFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      velocity_x_ = from.velocity_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      velocity_y_ = from.velocity_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      velocity_r_ = from.velocity_r_;
    }
    if (cached_has_bits & 0x00000010u) {
      kick_ = from.kick_;
    }
    if (cached_has_bits & 0x00000020u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000040u) {
      dribbler_spin_ = from.dribbler_spin_;
    }
    if (cached_has_bits & 0x00000080u) {
      current_angle_ = from.current_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_target_angle(from.target_angle());
  }
}

void Robot_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Command::CopyFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void Robot_Command::Swap(Robot_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot_Command::InternalSwap(Robot_Command* other) {
  std::swap(robot_id_, other->robot_id_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_r_, other->velocity_r_);
  std::swap(kick_, other->kick_);
  std::swap(power_, other->power_);
  std::swap(dribbler_spin_, other->dribbler_spin_);
  std::swap(current_angle_, other->current_angle_);
  std::swap(target_angle_, other->target_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot_Command::GetMetadata() const {
  protobuf_zss_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zss_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot_Command

// required int32 robot_id = 1;
bool Robot_Command::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot_Command::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot_Command::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot_Command::clear_robot_id() {
  robot_id_ = 0;
  clear_has_robot_id();
}
::google::protobuf::int32 Robot_Command::robot_id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.robot_id)
  return robot_id_;
}
void Robot_Command::set_robot_id(::google::protobuf::int32 value) {
  set_has_robot_id();
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.robot_id)
}

// required float velocity_x = 2;
bool Robot_Command::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot_Command::set_has_velocity_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot_Command::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot_Command::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
float Robot_Command::velocity_x() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_x)
  return velocity_x_;
}
void Robot_Command::set_velocity_x(float value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_x)
}

// required float velocity_y = 3;
bool Robot_Command::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot_Command::set_has_velocity_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot_Command::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot_Command::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
float Robot_Command::velocity_y() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_y)
  return velocity_y_;
}
void Robot_Command::set_velocity_y(float value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_y)
}

// required float velocity_r = 4;
bool Robot_Command::has_velocity_r() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robot_Command::set_has_velocity_r() {
  _has_bits_[0] |= 0x00000008u;
}
void Robot_Command::clear_has_velocity_r() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robot_Command::clear_velocity_r() {
  velocity_r_ = 0;
  clear_has_velocity_r();
}
float Robot_Command::velocity_r() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.velocity_r)
  return velocity_r_;
}
void Robot_Command::set_velocity_r(float value) {
  set_has_velocity_r();
  velocity_r_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.velocity_r)
}

// required bool kick = 5;
bool Robot_Command::has_kick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Robot_Command::set_has_kick() {
  _has_bits_[0] |= 0x00000010u;
}
void Robot_Command::clear_has_kick() {
  _has_bits_[0] &= ~0x00000010u;
}
void Robot_Command::clear_kick() {
  kick_ = false;
  clear_has_kick();
}
bool Robot_Command::kick() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.kick)
  return kick_;
}
void Robot_Command::set_kick(bool value) {
  set_has_kick();
  kick_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.kick)
}

// required float power = 6;
bool Robot_Command::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Robot_Command::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
void Robot_Command::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
void Robot_Command::clear_power() {
  power_ = 0;
  clear_has_power();
}
float Robot_Command::power() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.power)
  return power_;
}
void Robot_Command::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.power)
}

// required float dribbler_spin = 7;
bool Robot_Command::has_dribbler_spin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Robot_Command::set_has_dribbler_spin() {
  _has_bits_[0] |= 0x00000040u;
}
void Robot_Command::clear_has_dribbler_spin() {
  _has_bits_[0] &= ~0x00000040u;
}
void Robot_Command::clear_dribbler_spin() {
  dribbler_spin_ = 0;
  clear_has_dribbler_spin();
}
float Robot_Command::dribbler_spin() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.dribbler_spin)
  return dribbler_spin_;
}
void Robot_Command::set_dribbler_spin(float value) {
  set_has_dribbler_spin();
  dribbler_spin_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.dribbler_spin)
}

// optional float current_angle = 8;
bool Robot_Command::has_current_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Robot_Command::set_has_current_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void Robot_Command::clear_has_current_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void Robot_Command::clear_current_angle() {
  current_angle_ = 0;
  clear_has_current_angle();
}
float Robot_Command::current_angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.current_angle)
  return current_angle_;
}
void Robot_Command::set_current_angle(float value) {
  set_has_current_angle();
  current_angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.current_angle)
}

// optional float target_angle = 9;
bool Robot_Command::has_target_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Robot_Command::set_has_target_angle() {
  _has_bits_[0] |= 0x00000100u;
}
void Robot_Command::clear_has_target_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void Robot_Command::clear_target_angle() {
  target_angle_ = 0;
  clear_has_target_angle();
}
float Robot_Command::target_angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Command.target_angle)
  return target_angle_;
}
void Robot_Command::set_target_angle(float value) {
  set_has_target_angle();
  target_angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot_Command.target_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)
